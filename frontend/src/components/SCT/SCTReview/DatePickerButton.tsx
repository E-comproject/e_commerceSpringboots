"use client"

import * as React from "react"
import { FaCalendarAlt } from 'react-icons/fa'; // ‡πÑ‡∏≠‡∏Ñ‡∏≠‡∏ô‡∏õ‡∏è‡∏¥‡∏ó‡∏¥‡∏ô
import { Button } from "@/components/ui/button"
import { Calendar } from "@/components/ui/calendar"
import {
  Popover,
  PopoverContent,
  PopoverTrigger,
} from "@/components/ui/popover"

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ä‡πà‡∏ß‡∏¢‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á Array ‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á/‡∏ô‡∏≤‡∏ó‡∏µ
const getSelectOptions = (limit: number) => {
  return Array.from({ length: limit }, (_, i) => i);
};

export function DatePickerButton() {
  const [open, setOpen] = React.useState(false);
  const [date, setDate] = React.useState<Date | undefined>(undefined);
  const [hour, setHour] = React.useState(new Date().getHours()); // State ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö ‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á
  const [minute, setMinute] = React.useState(new Date().getMinutes()); // State ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö ‡∏ô‡∏≤‡∏ó‡∏µ
  
  // ‡∏™‡∏£‡πâ‡∏≤‡∏á Array ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö select option
  const hours = getSelectOptions(24);
  const minutes = getSelectOptions(60);

  // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏´‡∏•‡∏±‡∏Å‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ß‡∏±‡∏ô‡πÅ‡∏•‡∏∞‡πÄ‡∏ß‡∏•‡∏≤
  const handleDateSelect = (newDate: Date | undefined) => {
    if (newDate) {
      // ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ß‡∏±‡∏ô‡πÉ‡∏´‡∏°‡πà ‡πÉ‡∏´‡πâ‡∏õ‡∏£‡∏±‡∏ö‡∏Ñ‡πà‡∏≤‡πÄ‡∏ß‡∏•‡∏≤‡∏ï‡∏≤‡∏° State hour ‡πÅ‡∏•‡∏∞ minute
      newDate.setHours(hour);
      newDate.setMinutes(minute);
    }
    setDate(newDate);
    setOpen(false); // ‡∏õ‡∏¥‡∏î Popover ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ß‡∏±‡∏ô‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢
  };

  // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á/‡∏ô‡∏≤‡∏ó‡∏µ
  const handleTimeChange = (type: 'hour' | 'minute', value: number) => {
    const newDate = date ? new Date(date) : new Date(); // ‡πÉ‡∏ä‡πâ Date ‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô‡∏´‡∏£‡∏∑‡∏≠ Date ‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÑ‡∏ß‡πâ

    if (type === 'hour') {
      setHour(value);
      newDate.setHours(value);
    } else {
      setMinute(value);
      newDate.setMinutes(value);
    }
    setDate(newDate); // ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ï Date object ‡∏î‡πâ‡∏ß‡∏¢‡πÄ‡∏ß‡∏•‡∏≤‡πÉ‡∏´‡∏°‡πà
  };

  // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏õ‡∏∏‡πà‡∏°
  const buttonLabel = date 
    ? date.toLocaleString('th-TH', { 
        year: 'numeric', month: 'short', day: 'numeric', 
        hour: '2-digit', minute: '2-digit', hour12: false // ‡πÅ‡∏™‡∏î‡∏á‡πÄ‡∏ß‡∏•‡∏≤ 24-‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á
      }).replace('‡∏ô.', '') // ‡∏•‡∏ö "‡∏ô." ‡∏≠‡∏≠‡∏Å‡∏´‡∏≤‡∏Å‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£
    : "‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡∏£‡∏µ‡∏ß‡∏¥‡∏ß";

  return (
    <div className="flex flex-col gap-3">
      <Popover open={open} onOpenChange={setOpen}>
        <PopoverTrigger asChild>
          <Button
            type="button" // üîë ‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç: ‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏Å‡∏≤‡∏£ Submit form
            variant="default"
            id="datetime"
            // ‡∏õ‡∏£‡∏±‡∏ö Style ‡πÉ‡∏´‡πâ‡∏õ‡∏∏‡πà‡∏°‡∏™‡∏π‡∏á‡∏Ç‡∏∂‡πâ‡∏ô‡πÅ‡∏•‡∏∞‡∏°‡∏µ‡πÄ‡∏á‡∏≤
            className="w-auto  h-10 text-lg justify-between font-normal bg-[#578FCA] hover:bg-[#4a7eb8] rounded-full px-6 shadow-lg space-x-12"
          >
            <span className="text-white text-base">{buttonLabel}</span>
            <FaCalendarAlt className="h-5 w-5 text-white" />
          </Button>
        </PopoverTrigger>
        <PopoverContent className="w-auto overflow-hidden p-0" align="start">
          <Calendar
            mode="single"
            selected={date}
            captionLayout="dropdown"
            // ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ß‡∏±‡∏ô ‡πÉ‡∏´‡πâ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å handleDateSelect ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡πÄ‡∏ß‡∏•‡∏≤
            onSelect={handleDateSelect}
          />
          
          {/* ‡∏™‡πà‡∏ß‡∏ô‡∏Ç‡∏≠‡∏á Time Picker ‡∏ó‡∏µ‡πà‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏Ç‡πâ‡∏≤‡∏°‡∏≤ */}
          <div className="flex items-center justify-center p-3 border-t">
            <span className="text-sm font-medium mr-2">‡πÄ‡∏ß‡∏•‡∏≤:</span>
            
            {/* Select ‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á */}
            <select
              value={hour}
              onChange={(e) => handleTimeChange('hour', parseInt(e.target.value))}
              className="border rounded-md p-1 text-sm focus:ring-blue-500"
            >
              {hours.map((h) => (
                <option key={h} value={h}>
                  {h.toString().padStart(2, '0')}
                </option>
              ))}
            </select>
            
            <span className="mx-1 font-bold">:</span>
            
            {/* Select ‡∏ô‡∏≤‡∏ó‡∏µ */}
            <select
              value={minute}
              onChange={(e) => handleTimeChange('minute', parseInt(e.target.value))}
              className="border rounded-md p-1 text-sm focus:ring-blue-500"
            >
              {minutes.map((m) => (
                <option key={m} value={m}>
                  {m.toString().padStart(2, '0')}
                </option>
              ))}
            </select>
          </div>
        </PopoverContent>
      </Popover>
    </div>
  );
}